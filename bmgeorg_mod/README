MEMBERS:

Ben Coomes
Joshua Dunster
Megan Fowler
Jonathan Sarasua
_______________________________________________________________________________

DESCRIPTION

Our system consists of two programs, a client and a middleware. Working 
together, they instruct a virtual robot to move in a series of polygonal 
shapes and to send information about its position. The position data is saved to
files in the directory where robotClient is run. Images are sent back as well as
raw data. The client's main function is to prepare a basic series of commands 
which are sent to the middleware. The middleware then parses the commands and 
translates them into commands that the robot will understand. The middleware
sends the commands to the robot, and then forwards data recieved from the robot
to the client. 

The client takes input from the command line as follows:
./robotClient <server IP or host name> <server port> <robot ID> <L> <N>
where L = the side length and N = the number of sides. 

The server is started from the command line as follows:
./robotServer <server_port> <robot_IP/robot_hostname> <robot_ID> <image_id>

_______________________________________________________________________________

COMMENTS

We measured a speedup of about 1.18 when compared to bmgeorg's initial 
implementation. 

_______________________________________________________________________________

KNOWN PROBLEMS

Because the robot was 'lost' (in an area of the virtual world with no 
landmarks), we were unable to verify that MOVE, TURN, and STOP commands sent to
the robot had their intended effect. We have no reason to suspect that they do
not work as intented. 
_______________________________________________________________________________

DESIGN

Given the inputs of L and N (see description), the shape that the robot should
trace can be determined. The client constructs a list of commands that trace 
this shape and sends this command list to the sever. The command list is 
formatted in the following way: 
[command 0 len][command 0]...[command n len][command n][0]
where command n len is a single byte with a value that represents the number
of bytes in the command n that follows it. A command len of 0 indicates the
end of the command list. 

This command list is sent by the client to the middleware, which constructs
a queue of commands to process.  


.... middle ware stuff ....


The client waits to recieve data from the middleware. It stops waiting when a 
timeout is reached or when all of the expected data has been recieved. Data 
is only expected to come back from commands that contain the string "GET".
The data for each command is written into a file. 
_______________________________________________________________________________ 





