MEMBERS:

Ben Coomes
Joshua Dunster
Megan Fowler
Jonathan Sarasua

Super grouped with group 2:
T.J Willis
Dalton
Kyra
Andrew
_______________________________________________________________________________

DESCRIPTION

Our system consists of two programs, a client and a middleware server. Working 
together, they instruct a virtual robot to move in a series of polygonal 
shapes and to send information about its position. The position data is saved to
files in the directory where robotClient is run. Images are sent back as well as
raw data. The client's main function is to prepare a basic series of commands 
which are sent to the middleware. The middleware then parses the commands and 
translates them into commands that the robot will understand. The middleware
sends the commands to the robot, and then forwards data recieved from the robot
to the client. 

The client takes input from the command line as follows:
./robotClient <server IP or host name> <server port> <robot ID> <L> <N>
where L = the side length and N = the number of sides. 

The server is started from the command line as follows:
./robotServer <server_port> <robot_IP/robot_hostname> <robot_ID> <image_id>

_______________________________________________________________________________

COMMENTS

We measured a speedup of about 1.18 when compared to bmgeorg's initial 
implementation. We are very proud. 

If the included video does not work, it is available on Youtube: 
https://youtu.be/X_qEm-C4r0g

_______________________________________________________________________________

KNOWN PROBLEMS

Because the robot was 'lost' (in an area of the virtual world with no 
landmarks), we were unable to verify that MOVE, TURN, and STOP commands sent to
the robot had their intended effect. We have no reason to suspect that they do
not work as intented.

Our server is also not able to handle requests from multiple clients at the 
same time. 

Additionally, we have not been able to test our client with the other group's 
server beacuse their server code is not ready yet (as of 9:15 pm 4-28-16). 
However, we were able to successfully use their client with our server. 
_______________________________________________________________________________

DESIGN

Given the inputs of L and N (see description), the shape that the robot should
trace can be determined. The client constructs a list of commands that trace 
this shape and sends this command list to the sever. The command list is 
formatted in the following way: 
[command 0 len][command 0]...[command n len][command n][0]
where command n len is a single byte with a value that represents the number
of bytes in the command n that follows it. A command len of 0 indicates the
end of the command list. 

This command list is sent by the client to the middleware, which constructs
a queue of commands to process.  


The middleware server works like a factory. Three functions are threaded to have
all running at the same time. All communication is done through queues or global
variables. The queues pass elements that change between each client and command.
Global variables are used with constants like the robots information. The main 
function takes the message sent by the client, decompresses it, and parses the 
elements. These elements are added to the toRobot queue for the sendRecvRobot 
thread to handle. sendRecvRobot handles all communication to and from the robot. 
It loops forever waiting for elements to appear in its queue. When elements 
appear, it parses them into a HTTP message and sends it to the robot. Responses
are parsed and put on the toClient queue. sendToClient takes these elements, 
compresses them, and sends them back to the client.

The client waits to recieve data from the middleware. It stops waiting when a 
timeout is reached or when all of the expected data has been recieved. Data 
is only expected to come back from commands that contain the string "GET".
The data for each command is written into a file.

Compression is used during the transmission of image data from the middleware
software to the client software. The algorithm used is a basic dictionary
approach which replaces repeated patterns of four characters in a row with a
dictionary index number. The dictionary built which holds the indices of each
repeated substring is created and prepended to the compressed string, and can
be decoded in order to rebuild the dictionary in the decompression function.
In order to ease the composition of the compression functions, they were
written in C++ with C wrapper functions to convert C-string inputs to C++
string objects, and C++ string object outputs to C-string outputs. This
allowed for C++ library functions for map and vector data structures to be
used.
_______________________________________________________________________________ 





